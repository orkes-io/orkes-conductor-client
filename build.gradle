buildscript {
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id "com.diffplug.spotless" version "5.0.0"
    id 'jacoco'
    id 'idea'
}

ext {
    versions = [
            awaitility      : '4.2.0',
            commonsLang     : '3.12.0',
            conductor       : '3.9.0-orkes-o',
            jackson         : '2.11.4!!',
            jersey          : '1.19.4',
            junit           : '5.9.0',
            slf4j           : '1.7.36',
            spectator       : '1.3.7',
            awsSsm          : '1.12.300',
            azureSsm        : '4.2.3',
            azureIdentity   : '1.3.7',
            eureka          : '1.10.17',
            wiremock        : '2.33.2',
            ioGRPC          : '1.49.0',
            ioGRPC          : '1.49.0',
            protoBuf        : '3.19.4',
            lombok          : '1.18.24',
            revJAXRS        : '2.1.1',
            revJerseyCommon : '2.22.2',
            netty           : '4.1.77.Final'

    ]
}

group = 'io.orkes.conductor'

dependencies {

    api ("io.orkes.conductor:conductor-client:${versions.conductor}")
    api ("io.orkes.conductor:conductor-client-spring:${versions.conductor}")
    api ("io.orkes.conductor:conductor-common:${versions.conductor}")
    api ("io.orkes.conductor:conductor-grpc:${versions.conductor}")
    api ("io.orkes.conductor:conductor-java-sdk:${versions.conductor}")
    implementation "com.sun.jersey:jersey-client:${versions.jersey}"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"

    implementation "javax.ws.rs:javax.ws.rs-api:${versions.revJAXRS}"
    implementation "org.glassfish.jersey.core:jersey-common:${versions.revJerseyCommon}"

    implementation "org.slf4j:slf4j-api:${versions.slf4j}"

    api 'io.orkes.conductor:orkes-conductor-common-protos:0.9.2'

    //gRPC dependencies
    implementation ("io.grpc:grpc-netty:${versions.ioGRPC}") {
        exclude module: "netty-common"
    }
    implementation "io.grpc:grpc-stub:${versions.ioGRPC}"
    implementation "com.google.protobuf:protobuf-java:${versions.protoBuf}"
    implementation "io.grpc:grpc-protobuf:${versions.ioGRPC}"
    implementation "io.grpc:grpc-stub:${versions.ioGRPC}"
    implementation "io.netty:netty-tcnative-boringssl-static:2.0.51.Final"

    //Kafka
    implementation 'org.apache.kafka:kafka-clients:3.3.1'

    //Misc
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    compileOnly "org.projectlombok:lombok:${versions.lombok}"

    implementation "com.netflix.spectator:spectator-api:${versions.spectator}"
    implementation("com.netflix.eureka:eureka-client:${versions.eureka}") {
        exclude group: "javax.servlet", module: "servlet-api"
    }

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'

    implementation 'io.swagger.core.v3:swagger-annotations:2.2.2'

    implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"

    implementation 'org.threeten:threetenbp:1.6.1'

    //Integrations
    implementation "com.amazonaws:aws-java-sdk-ssm:${versions.awsSsm}"
    implementation "com.azure:azure-security-keyvault-secrets:${versions.azureSsm}"
    implementation "com.azure:azure-identity:${versions.azureIdentity}"

    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.testcontainers:localstack:1.17.1'
    testImplementation 'org.testcontainers:testcontainers:1.17.1'
    testImplementation 'com.amazonaws:aws-java-sdk-core:1.12.138'
    testImplementation "org.projectlombok:lombok:${versions.lombok}"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    exclude 'io/orkes/conductor/sdk/examples'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Orkes Conductor Client'
                description = 'Netflix Conductor client that provides support for Orkes Conductor features'
                url = 'https://github.com/orkes-io/orkes-conductor-client'
                scm {
                    connection = 'scm:git:git://github.com/orkes-io/orkes-conductor-client.git'
                    developerConnection = 'scm:git:ssh://github.com:orkes-io/orkes-conductor-client.git'
                    url = 'https://github.com/orkes-io/orkes-conductor-client'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        organization = 'Orkes'
                        organizationUrl = 'https://orkes.io'
                        name = 'Orkes Development Team'
                        email = 'developers@orkes.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("mavenCentral")) {
                println "Publishing to Sonatype Repository"
                url = "https://s01.oss.sonatype.org/${project.version.endsWith('-SNAPSHOT') ? "content/repositories/snapshots/" : "service/local/staging/deploy/maven2/"}"
                credentials {
                    username project.properties.username
                    password project.properties.password
                }
            } else {
                url = "s3://orkes-artifacts-repo/${project.version.endsWith('-SNAPSHOT') ? "snapshots" : "releases"}"
                authentication {
                    awsIm(AwsImAuthentication)
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
    testLogging {
        events = ["SKIPPED", "FAILED"]
        exceptionFormat = "short"
        showStandardStreams = true
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

configurations.implementation {
    exclude(group : "com.netflix.conductor")
}


spotless {
    java {
        removeUnusedImports()
        importOrder('java', 'javax', 'org', 'com.netflix', 'io.orkes','', '\\#com.netflix', '\\#')
        licenseHeaderFile("$rootDir/licenseheader.txt")
    }
}

signing {
    def signingKeyId = findProperty('signingKeyId')
    if (signingKeyId) {
        println 'Signing the artifact with keys'
        signing {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            if (signingKeyId && signingKey && signingPassword) {
                useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
            }

            sign publishing.publications
        }
    }
}
tasks.withType(Test)  {
    maxParallelForks = 2
}
sourceSets.main.java.srcDirs += ['example/java', 'example/resources']

