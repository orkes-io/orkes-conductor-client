/*
 * Orkes Conductor API Server
 * Orkes Conductor API Server
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.orkes.conductor.client.http.api;

import com.fasterxml.jackson.core.type.TypeReference;
import io.orkes.conductor.client.model.SchemaDef;
import io.orkes.conductor.client.ApiClient;

import java.io.IOException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaResourceApi {
    private ApiClient apiClient;

    public SchemaResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteSchemaByName
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSchemaByNameCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/schema/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSchemaByNameValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSchemaByName(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSchemaByNameCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all versions of schema by name
     * 
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSchemaByName(String name) throws ApiException {
        deleteSchemaByNameWithHttpInfo(name);
    }

    /**
     * Delete all versions of schema by name
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSchemaByNameWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteSchemaByNameValidateBeforeCall(name, null, null);
        return apiClient.execute(call);
    }


    /**
     * Build call for deleteSchemaByNameAndVersion
     * @param name  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSchemaByNameAndVersionCall(String name, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/schema/{name}/{version}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSchemaByNameAndVersionValidateBeforeCall(String name, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSchemaByNameAndVersion(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteSchemaByNameAndVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSchemaByNameAndVersionCall(name, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a version of schema by name
     * 
     * @param name  (required)
     * @param version  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSchemaByNameAndVersion(String name, Integer version) throws ApiException {
        deleteSchemaByNameAndVersionWithHttpInfo(name, version);
    }

    /**
     * Delete a version of schema by name
     * 
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSchemaByNameAndVersionWithHttpInfo(String name, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = deleteSchemaByNameAndVersionValidateBeforeCall(name, version, null, null);
        return apiClient.execute(call);
    }

    /**
       /**
     * Build call for getSchemaByNameAndVersion
     * @param name  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSchemaByNameAndVersionCall(String name, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/schema/{name}/{version}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSchemaByNameAndVersionValidateBeforeCall(String name, Integer version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSchemaByNameAndVersion(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getSchemaByNameAndVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = getSchemaByNameAndVersionCall(name, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get schema by name and version
     * 
     * @param name  (required)
     * @param version  (required)
     * @return SchemaDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaDef getSchemaByNameAndVersion(String name, Integer version) throws ApiException {
        ApiResponse<SchemaDef> resp = getSchemaByNameAndVersionWithHttpInfo(name, version);
        return resp.getData();
    }

    /**
     * Get schema by name and version
     * 
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;SchemaDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaDef> getSchemaByNameAndVersionWithHttpInfo(String name, Integer version) throws ApiException {
        com.squareup.okhttp.Call call = getSchemaByNameAndVersionValidateBeforeCall(name, version, null, null);
        Type localVarReturnType = new TypeReference<SchemaDef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Build call for saveSchema
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSchemaCall(SchemaDef body, Boolean newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newVersion", newVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveSchemaValidateBeforeCall(SchemaDef body, Boolean newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveSchema(Async)");
        }
        
        com.squareup.okhttp.Call call = saveSchemaCall(body, newVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save schema
     * 
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @return SchemaDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaDef saveSchema(SchemaDef body, Boolean newVersion) throws ApiException {
        ApiResponse<SchemaDef> resp = saveSchemaWithHttpInfo(body, newVersion);
        return resp.getData();
    }

    /**
     * Save schema
     * 
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @return ApiResponse&lt;SchemaDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaDef> saveSchemaWithHttpInfo(SchemaDef body, Boolean newVersion) throws ApiException {
        com.squareup.okhttp.Call call = saveSchemaValidateBeforeCall(body, newVersion, null, null);
        Type localVarReturnType = new TypeReference<SchemaDef>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Build call for saveSchemas
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call saveSchemasCall(List<SchemaDef> body, Boolean newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/schema/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newVersion", newVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveSchemasValidateBeforeCall(List<SchemaDef> body, Boolean newVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveSchemas(Async)");
        }
        
        com.squareup.okhttp.Call call = saveSchemasCall(body, newVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save schemas
     * 
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @return List&lt;SchemaDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SchemaDef> saveSchemas(List<SchemaDef> body, Boolean newVersion) throws ApiException {
        ApiResponse<List<SchemaDef>> resp = saveSchemasWithHttpInfo(body, newVersion);
        return resp.getData();
    }

    /**
     * Save schemas
     * 
     * @param body  (required)
     * @param newVersion  (optional, default to false)
     * @return ApiResponse&lt;List&lt;SchemaDef&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<List<SchemaDef>> saveSchemasWithHttpInfo(List<SchemaDef> body, Boolean newVersion) throws ApiException {
        com.squareup.okhttp.Call call = saveSchemasValidateBeforeCall(body, newVersion, null, null);
        Type localVarReturnType = new TypeReference<List<SchemaDef>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }
}
